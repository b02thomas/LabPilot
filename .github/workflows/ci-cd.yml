name: LabPilot CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run check

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: labpilot_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/labpilot_test
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            client/dist/
          retention-days: 30

  # Security Vulnerability Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: code-quality
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Container Build
  container-build:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: container-build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.labpilot.com
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          echo "Image digest: ${{ needs.container-build.outputs.image-digest }}"
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, or cloud provider CLI commands

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: container-build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://labpilot.com
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          echo "Image digest: ${{ needs.container-build.outputs.image-digest }}"
          # Add your production deployment commands here
          # Example: kubectl, docker-compose, or cloud provider CLI commands

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Health check staging
        if: needs.deploy-staging.result == 'success'
        run: |
          curl -f https://staging.labpilot.com/api/health || exit 1

      - name: Health check production
        if: needs.deploy-production.result == 'success'
        run: |
          curl -f https://labpilot.com/api/health || exit 1

  # Notify on failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan, container-build, deploy-staging, deploy-production]
    if: failure()
    steps:
      - name: Notify team
        run: |
          echo "Pipeline failed. Notification would be sent to team."
          # Add your notification logic here (Slack, email, etc.)