version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: labpilot-db
    environment:
      POSTGRES_DB: labpilot
      POSTGRES_USER: labpilot_user
      POSTGRES_PASSWORD: LabPilot#2025Secure
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U labpilot_user -d labpilot"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - labpilot-network

  # Redis for Session Storage (Production)
  redis:
    image: redis:7-alpine
    container_name: labpilot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - labpilot-network

  # LabPilot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: labpilot-app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://labpilot_user:LabPilot#2025Secure@postgres:5432/labpilot
      REDIS_URL: redis://redis:6379
      SESSION_SECRET: LabPilot_Session_Secret_Change_In_Production_2025
      FRONTEND_URL: http://localhost:80
      npm_package_version: 1.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
      - assets_data:/app/attached_assets
    healthcheck:
      test: ["CMD", "node", "-e", "http.get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - labpilot-network

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: labpilot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - labpilot-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  assets_data:
    driver: local

networks:
  labpilot-network:
    driver: bridge